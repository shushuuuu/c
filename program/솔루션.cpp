#include <stdio.h>

void main()
{
#pragma region 상수
	/* //실행되는 동안 더이상 값을 변경할 수 없는 메모리 공간

	 const int data = 100;
	 
     // 상수는 메모리 공간을 생성하는 동시에 초기화해야 하며 
	 //한 번 저장된 값은 더이상 변경 불가 
     // ex) data = 999;
	 //심볼릭상수(메모리공간을 가지고잇는 상수) = data
	 //리터럴 상수(메모리 공간을 가지고있지않은 상수) = 100
	 
	 const float pi = 3.14f;
	 
	 printf("pi의 값은 : %f\n", pi);
	 
	 //"%f : 실수(float)를 표현하는 서식 지정자
     // 정수형 리터럴 상수는 저장하는 값의 범위가 크지않으면 
	 //int 자료형으로 저장되며 실수형 리터럴 상수는 double 자료형으로 저장됨
	 
	 float value = 3.1415926535;
	 
	 printf("value의 값 : %.10lf\n", value);
	 
	 //"%lf : 실수(double)를 표현하는 서식 지정자
	 //printf 함수로 소수를 출력할 때 4byte 크기의 실수형
	 //자료형은 소수점 이하 6자리 까지만 표기하며 8byte 크기의
	 //실수형 자료형은 소수점 이하 15자리까지만 표기 */
#pragma endregion

#pragma region 비트
	// 데이터를 나타내는 최소의 단위 0또는 1의 조합으로 
	// 논리 계산을 수행하는 단위

	char character = 10;

	//<10 진수를 2진수로 변환하는 과정>
	//10진수를 1이 될 때까지 2로 계속 나누어 준 다음
	//나눈 위치의 나머지 값을 아래에서 위로 순서대로 정리해줌

	//10 -> [0][0][0][0][1][0][1][0]

	//메모리는 비트 단위로 데이터를 저장할 수 있으며
	//1개의 비트에는 0또는 1값만 저장 가능

	// <2 진수를 10 진수로 변환하는 과정> 
	// 1byte에 2 진수로 저장된 값을 2의 제곱으로 나타냄
	//각각의 비트에 1이 있다면 1과 2의 제곱의 위치를 계산한다음
	//각각의 비트를 모두 더하여 10진수로 나타냄
#pragma endregion

#pragma region 비트연산자 
	// 비트 단위로 논리 연산을 수행하기 위해 사용하는 연산자

	//<and 연산자>
	// 모두 1이면 1반환
	int x = 10; //0000 1010
	int y = 6;  //0000 0110

	printf("x와 y를 and 연산한 결과 : %d\n", x & y); //2
	
	//<or 연산자>
	// 둘중에 하나만이라도 1 이면 1반환

	printf("x와 y를 or 연산한 결과 : %d\n", x | y); //14

	//<xor 연산자>
	//두 개의 피연산자가 서로 같으면 0을 반환
	//서로다르면 1 반환

	printf("x와 y를 xor 연산한 결과 : %d\n", x ^ y); //12

	//<not 연산자>
	//한 개의 비트를 반전하는 연산자 

	printf("x와 y를 not 연산한 결과 : %d\n", ~x); //1111 0101

	// 첫 번째 비트는 부호를 나타내며 첫 번째 비트에 1이있다면 값은 음수가됨 


#pragma endregion

}